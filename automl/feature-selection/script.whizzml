(define (check-inputs)
  (if (and (empty? pre-selected-fields)
           (not (= (resource-type train-dataset) "dataset")))
    (raise "You should provide a train-dataset or some pre-selected-fields")))

(define (flatten items)
  (if (every? list? items) (flatten (reduce concat [] items)) items))

(define (field-ids-from-names dataset fields)
  (map (lambda(f) ((find-field (resource-fields dataset) f) "id")) fields))

(define (field-names-from-ids dataset fields)
  (map (lambda(f) ((find-field (resource-fields dataset) f) "name")) fields))

(define (filter-dataset-fields dataset excluded-fields)
  (let (fields (resource-fields dataset))
    (field-names-from-ids
     dataset
     (filter (lambda (f) (not (member? ((fields f) "name") excluded-fields)))
             (keys fields)))))

(define (rfe-best-num-features evaluations)
  (get (max-key (lambda (ev) (get ev "evaluation")) evaluations)
       "features"))

(define (rfe-evaluations exec)
  (let (output-features (head (((fetch (wait exec)) "execution") "outputs")))
    (get (output-features 1) "evaluations")))

(define (rfe-output-fields dataset evaluations num-features)
  (let (excluded (map (lambda (n) (n "last-removed"))
                      (filter (lambda (n) (> (n "features") num-features))
                              evaluations)))
    (log-info "feature-selection: removing " (count excluded) " features")
    (filter-dataset-fields dataset (flatten excluded))))

(define (rfe-select-fields script train-dataset validation-dataset)
  (log-info "feature-selection: executing RFE")
  (let ([train-ds test-ds] (if (= "dataset" (resource-type validation-dataset))
                             [train-dataset validation-dataset]
                             (create-random-dataset-split train-dataset 0.8))
        exec (create-execution script
                               {"inputs" [["dataset-id" train-ds]
                                          ["n" 1]
                                          ["test-ds-id" test-ds]]})
        evaluations (rfe-evaluations exec)
        num-features (rfe-best-num-features evaluations))
    (rfe-output-fields train-dataset evaluations num-features)))

(check-inputs)

(define selected-fields
  (if (not (empty? pre-selected-fields))
    pre-selected-fields
    (rfe-select-fields rfe-script-id train-dataset validation-dataset)))

(log-info "feature-selection: Obtaining the most important features")

(define filtered-train-dataset
  (when (= "dataset" (resource-type train-dataset))
    (create-dataset {"name" (str (resource-name train-dataset) " | filtered")
                     "origin_dataset" train-dataset
                     "input_fields" (field-ids-from-names train-dataset
                                                          selected-fields)})))

(log-info "feature-selection: Filtering train dataset")

(define filtered-validation-dataset
  (when (= "dataset" (resource-type validation-dataset))
    (create-dataset {"name" (str (resource-name validation-dataset) " | filtered")
                     "origin_dataset" validation-dataset
                     "input_fields" (field-ids-from-names validation-dataset
                                                          selected-fields)})))

(log-info "feature-selection: Filtering validation dataset")

(define filtered-test-dataset
  (when (= "dataset" (resource-type test-dataset))
    (create-dataset {"name" (str (resource-name test-dataset) " | filtered")
                     "origin_dataset" test-dataset
                     "input_fields" (field-ids-from-names test-dataset
                                                          selected-fields)})))

(log-info "feature-selection: Filtering test dataset")
