
(define ds-id "dataset/59dc21f336452728a000aabc")
(define training-rate 0.8)
(define objective-field "diabetes")
(define rare-class "true")



;; Transposes the matrix: [[a b] [c d]] to [[a c] [b d]]
(define (_transpose m)
  (apply map list m))

;; Deletes resources ignoring errors
(define (_safe-delete id)
  (try (delete id)
       (catch e
         (log-info (str "Error deleting resource " id " ignored:" e))
         false)))

;; Check that the objective field exists, is a categorical field and
;; contains the rare class
(define (_check-cat fields objective-field rare-class)
  (let (field (find-field fields objective-field))
    (when (not (find-field fields objective-field))
      (raise {"message" (str "The objective field "
                             objective-field
                             " cannot be found in this dataset")
              "code" 100}))
    (when (not (categorical-field? field))
      (raise {"message" (str "The objective field "
                             objective-field
                             " is not a categorical field."
                             " Only categorical fields can be used.")
              "code" 101}))
    (when (not (member? rare-class (field-categories field)))
      (raise {"message" (str "The objective field "
                             objective-field
                             " does not contain the "
                             rare-class
                             " category. Please check its name.")
              "code" 102}))))

;; Function to apply stratified split for the rare class of the objective field
;; with a given training-rate
(define (rare-stratified-split-fn ds-id training-rate objective-field
                                  rare-class)
  (let (dataset (fetch ds-id)
        ds-name (dataset "name")
        fields (resource-fields dataset)
        _ (_check-cat fields objective-field rare-class)
        objective-id ((find-field fields objective-field) "id")
        filters [(flatline "(= (f {{objective-id}}) {{rare-class}})")
                 (flatline "(!= (f {{objective-id}}) {{rare-class}})")]
        names [rare-class (str "not " rare-class)]
        cat-ds-ids (iterate (acc [] expr filters name names)
                     (append acc
                       (create-dataset-split
                         (create-dataset {"origin_dataset" ds-id
                                          "lisp_filter" expr
                                          "name" (str (dataset "name")
                                                      " - "
                                                      name)})
                         training-rate
                         "bigml")))
        inner-ds (flatten cat-ds-ids)
        ds-ids (map (lambda (ids name)
                      (merge-datasets ids {"name" name}))
                    (_transpose cat-ds-ids)
                    [(str ds-name " - train (" (* training-rate 100) "%)")
                     (str ds-name
                          " - test ("
                          (round (* 100 (- 1 training-rate)))
                          "%)")]))
    (wait* ds-ids)
    (map _safe-delete inner-ds)
    ds-ids))


;; Function to generated datasets that keep all instances of the rare class
;; and undersample the instances in the common classes according to a
;; list of given proportions (e.g. [1, 5, 10] would create a list of
;; 1:1, 1:5, 1:10 proportions of instances being in the rare:common categories
(define (undersample-fn ds-id proportions-list objective-field rare-class)
  (let (dataset (fetch ds-id)
        ds-name (dataset "name")
        fields (resource-fields dataset)
        _ (_check-cat fields objective-field rare-class)
        objective-id ((find-field fields objective-field) "id")
        rows (dataset "rows")
        field-summary (field-distribution (find-field fields objective-field))
        _ (log-info field-summary)
        rare-instances ((head (filter (lambda (f) (= (f 0) rare-class))
                                      field-summary)) 1)
        balance-rate (/ rare-instances rows)
        filters [(flatline "(= (f {{objective-id}}) {{rare-class}})")
                 (flatline "(!= (f {{objective-id}}) {{rare-class}})")]
        names [rare-class (str "not " rare-class)]
        rates (for (proportion proportions-list)
                [1 (* proportion balance-rate)])
        cat-ds-ids (iterate (acc []
                             rate-pair rates
                             proportion proportions-list)
                     (append acc
                       (iterate (
                         acc2 [] expr filters name names rate rate-pair)
                         (append acc2
                           (create-dataset {"origin_dataset" ds-id
                                            "lisp_filter" expr
                                            "sample_rate" rate
                                            "name" (str (dataset "name")
                                                        " - "
                                                        name
                                                        "[1:" proportion "]")}
                    )))))
        ds-ids (map (lambda (ids proportion)
                      (merge-datasets ids
                                      {"name" (str ds-name
                                                   " - undersampled [1: "
                                                   proportion
                                                   "]")}))
                    cat-ds-ids proportions-list))
    (wait* ds-ids)
    (map _safe-delete (flatten cat-ds-ids))
    ds-ids))

;; Function to create a collection of OptiMLs using different objective
;; weights for the rare class
(define (weighted-optimls-fn ds weights-list
                                objective-field
                                rare-class
                                optiml-config)
  (for (weight weights-list)
    (let (config {"dataset" ds
                  "objective_weights" [[rare-class weight]]
                  "objective_field" objective-field
                  "metric_class" rare-class}
          config (merge config optiml-config))
      (create-optiml config))))
